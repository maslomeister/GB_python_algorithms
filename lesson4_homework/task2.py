# 2. Написать два алгоритма нахождения i-го по счёту простого числа. Функция нахождения простого числа должна принимать на вход натуральное и возвращать соответствующее простое число. Проанализировать скорость и сложность алгоритмов.
# Первый — с помощью алгоритма «Решето Эратосфена».
# Примечание. Алгоритм «Решето Эратосфена» разбирался на одном из прошлых уроков. Используйте этот код и попробуйте его улучшить/оптимизировать под задачу.
# Второй — без использования «Решета Эратосфена».
# Примечание. Вспомните классический способ проверки числа на простоту.
# Пример работы программ:
# >>> sieve(2)
# 3
# >>> prime(4)
# 7
# >>> sieve(5)
# 11
# >>> prime(1)
# 2


def sieve(index):

    sieve = [i for i in range(10)]
    sieve[1] = 0
    n = 10
    i = 0
    counter = 0

    while True:

        i += 1

        if sieve[i] != 0:
            j = i * 2

            while j < n:
                sieve[j] = 0
                j += i

        if i == n - 1:
            for k in range(0, n):
                if sieve[k] != 0:
                    counter += 1

                if counter == index:
                    return sieve[k]

                sieve.append(len(sieve) - 1 + 1)

            i = 0
            n += 10
            counter = 0


def prime(index):
    counter = 0
    num = 1
    while True:
        if counter == index:
            return num
        else:
            num += 1
            d = 2
            while num % d != 0:
                d += 1
            if d == num:
                counter += 1


#print(prime(1000))
#print(sieve(1000))
